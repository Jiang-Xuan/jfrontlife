{"data":{"markdownRemark":{"html":"<h2><a href=\"%5Bhttps://eslint.org/docs/rules/comma-dangle%5D(https://eslint.org/docs/rules/comma-dangle)\">comma-dangle 规则</a></h2>\n<p>为了方便 git 来对比每次提交的差异, 该规则必须遵守, ECMAScript 规范添加该语法就是为了 git 追踪代码变化.</p>\n<h2><a href=\"%5Bhttps://eslint.org/docs/rules/semi%5D(https://eslint.org/docs/rules/semi)\">semi 规则</a></h2>\n<p>强烈推荐所有的语句都加上分号, 防止一些<a href=\"%5Bhttps://mislav.net/2010/05/semicolons/%5D(https://mislav.net/2010/05/semicolons/)\">意外 bug</a> 的出现.</p>\n<h2><a href=\"%5Bhttps://eslint.org/docs/rules/prefer-const.html%5D(https://eslint.org/docs/rules/prefer-const.html)\">perfer const 规则</a></h2>\n<p>在不改变变量的情况下, 必须使用 <code class=\"language-text\">const</code> 赋值变量. 如果需要改变变量的值, 则使用 <code class=\"language-text\">let</code>. 禁用 <code class=\"language-text\">var</code> <a href=\"%5Bhttps://eslint.org/docs/rules/no-var.html%5D(https://eslint.org/docs/rules/no-var.html)\">no-var 规则</a>.</p>\n<h2><a href=\"%5Bhttps://eslint.org/docs/rules/object-shorthand.html%5D(https://eslint.org/docs/rules/object-shorthand.html)\">object shorthand 规则</a></h2>\n<p>对象的缩写形式, 必须遵循.</p>\n<h2>[group shorthand property 规则]</h2>\n<p>对象的缩写必须在声明对象字面量的前面</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> quz <span class=\"token operator\">=</span> <span class=\"token string\">'quz'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  bar<span class=\"token punctuation\">,</span>\n  quz<span class=\"token punctuation\">,</span>\n  quzz<span class=\"token punctuation\">:</span> <span class=\"token string\">'quzz'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>[group rest spread 规则]</h2>\n<p>使用 rest spread 操作符 + shorthand property + property 时的排序. rest spread 操作符 > shorthand property > property. 这样可以保证你可以确定你手动赋予给该对象的属性不会被覆盖.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> foo <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> quz<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> quzz<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> bar <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> quz <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 直接就可以看出来该对象拥有 foo 属性, 并且其值为 4</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span>foo<span class=\"token punctuation\">,</span>\n  quz<span class=\"token punctuation\">,</span>\n  foo<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>例外: 内部封装的参数对象允许被外部覆盖的时候需要将 rest spread 放置在最后</p>\n</blockquote>\n<h2><a href=\"%5Bhttps://eslint.org/docs/rules/no-prototype-builtins%5D(https://eslint.org/docs/rules/no-prototype-builtins)\">no prototype builtins 规则</a></h2>\n<p>不要直接调用 <code class=\"language-text\">Object.prototype</code> 上面的方法, 例如 <code class=\"language-text\">hasOwnProperty</code>, <code class=\"language-text\">propertyIsEnumerable</code>, <code class=\"language-text\">isPrototypeOf</code></p>\n<blockquote>\n<p>为什么? 这些属性有可能被对象覆盖, 如: { hasOwnProperty: false }, 或者 Object.create(null)</p>\n</blockquote>\n<h2>推荐使用 object rest operator 而不是 <code class=\"language-text\">Object.assign</code> 来浅拷贝 对象</h2>\n<p>使用 object rest operator 来获取一个新的对象但是省略某一个或几个属性.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// very bad</span>\n<span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> quz<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">delete</span> copy<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// bad</span>\n<span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> quz<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// good</span>\n<span class=\"token keyword\">const</span> original <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> copy <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>original<span class=\"token punctuation\">,</span> quz<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> quz<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>noQuz <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> copy<span class=\"token punctuation\">;</span></code></pre></div>\n<h2>命名规范</h2>\n<h3>class 命名</h3>\n<ul>\n<li>\n<p>带有大写缩写名词(EMA, ECMA, DXY, FBI)的命名, 以首字母大写驼峰式命名, 并且大写缩写名词只有首字母大写, 其余的大写字母转为小写</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FooFbiClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FbiFooClass</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>正常的单词命名, 采用首字母大写的驼峰式命名</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FooBarQuzQuzz</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">React<span class=\"token punctuation\">.</span>Component</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h3>变量命名</h3>\n<ul>\n<li>\n<p>带有大写缩写名词(EMA, ECMA, DXY, FBI)的命名, 采用驼峰式命名, 并且大写缩写名词只有首字母大写, 其余的大写字母转为小写. 如果大写缩写名词需要放在变量命名的开始, 则该大写缩写名词全部小写.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fooFbiVar <span class=\"token operator\">=</span> <span class=\"token string\">'foo fbi var'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fbiFooVar <span class=\"token operator\">=</span> <span class=\"token string\">'fbi foo var'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li>\n<p>正常的单词命名, 采用驼峰式命名.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> fooBarQuzQuzz <span class=\"token operator\">=</span> <span class=\"token string\">'foo bar quz quzz'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"date":"March 29, 2019","path":"/the-rule-of-ecmascript","title":"ECMAScript 代码规范 - 主要表现为 ESLint 规范","tags":["eslint","规范"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}